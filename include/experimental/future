//
// future
// ~~~~~~
// Extends the standard future header with the special value use_future.
//
// Copyright (c) 2014 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef EXECUTORS_EXPERIMENTAL_FUTURE_HEADER
#define EXECUTORS_EXPERIMENTAL_FUTURE_HEADER

#include <experimental/type_traits>
#include <future>
#include <new>

namespace std {
namespace experimental {
inline namespace concurrency_v1 {

// The class template use_future_t defines a set of completion token types for
// use with asynchronous operations.

template <class _Alloc = allocator<void>>
class use_future_t
{
public:
  typedef _Alloc allocator_type;

  constexpr use_future_t() noexcept
  {
  }

  explicit use_future_t(const _Alloc& __a) noexcept
    : _M_allocator(__a)
  {
  }

  template <class _OtherAllocator>
  use_future_t<_OtherAllocator> operator[](
    const _OtherAllocator& __a) const noexcept
  {
    return use_future_t<_OtherAllocator>(__a);
  }

  allocator_type get_allocator() const noexcept
  {
    return _M_allocator;
  }

private:
  allocator_type _M_allocator;
};

constexpr use_future_t<> use_future;

template <class _Alloc, class _R, class... _Args>
  struct handler_type<use_future_t<_Alloc>, _R(_Args...)>;

// The class template package_t permits lazy construction of a packaged_task
// from a completion token.

template <class _Func, class _Alloc = allocator<void>>
struct package_t
{
  typedef _Alloc allocator_type;

  explicit package_t(_Func __f)
    : _M_func(std::move(__f))
  {
  }

  package_t(_Func __f, const _Alloc& __a)
    : _M_func(std::move(__f)),
      _M_allocator(__a)
  {
  }

  allocator_type get_allocator() const noexcept
  {
    return _M_allocator;
  }

private:
  template <class, class> friend struct __packaged_task;
  _Func _M_func;
  _Alloc _M_allocator;
};

template <class _Func, class _Alloc, class _R, class... _Args>
  struct handler_type<package_t<_Func, _Alloc>, _R(_Args...)>;

template <class _F, class _Alloc = allocator<void>>
  package_t<typename decay<_F>::type, _Alloc> package(
    _F&& __f, const _Alloc& __a = _Alloc());

// Support for packaged_task<>.

template <class _R, class... _Args>
  class async_result<packaged_task<_R(_Args...)>>;

} // inline namespace concurrency_v1
} // namespace experimental
} // namespace std

#include <experimental/bits/promise_handler.h>
#include <experimental/bits/packaged_task.h>

#endif
