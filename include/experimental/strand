//
// strand
// ~~~~~~
// Strand used for preventing non-concurrent invocation of handlers.
//
// Copyright (c) 2014 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef EXECUTORS_EXPERIMENTAL_STRAND_HEADER
#define EXECUTORS_EXPERIMENTAL_STRAND_HEADER

#include <experimental/executor>
#include <memory>
#include <type_traits>

namespace std {
namespace experimental {

struct __strand_impl;

template <class _Executor>
class strand
{
public:
  class work;

  // construct / copy / destroy:

  strand(typename enable_if<is_default_constructible<_Executor>::value>::type* = 0);
  explicit strand(_Executor __e);
  strand(const strand& __s);
  strand(strand&& __s);
  template <class _OtherExecutor> strand(const strand<_OtherExecutor>& __s);
  template <class _OtherExecutor> strand(strand<_OtherExecutor>&& __s);

  strand& operator=(const strand& __s);
  strand& operator=(strand&& __s);
  template <class _OtherExecutor> strand& operator=(const strand<_OtherExecutor>& __s);
  template <class _OtherExecutor> strand& operator=(strand<_OtherExecutor>&& __s);

  ~strand();

  // executor operations:

  template <class _Func> void post(_Func&& __f);
  template <class _Func> void dispatch(_Func&& __f);
  work make_work();
  template <class _Func> auto wrap(_Func&& __f);
  execution_context& context();

private:
  template <class> friend class strand;
  friend class work;
  strand(_Executor&& __e, const shared_ptr<__strand_impl>& __i);
  _Executor _M_executor;
  shared_ptr<__strand_impl> _M_impl;
};

template <class _Executor>
class strand<_Executor>::work
{
public:
  // construct / copy / destroy:

  work(const work& __w);
  work(work&& __w);

  work& operator=(const work& __w);
  work& operator=(work&& __w);

  ~work();

  friend strand make_executor(const work& __w) { return __w._Get_strand(); }
  friend strand make_executor(work&& __w) { return __w._Move_strand(); }

private:
  friend class strand;
  work(typename _Executor::work&& __w, const shared_ptr<__strand_impl>& __i);
  strand _Get_strand() const { return strand(make_executor(_M_work), _M_impl); }
  strand _Move_strand() { return strand(make_executor(_M_work), std::move(_M_impl)); }
  typename _Executor::work _M_work;
  shared_ptr<__strand_impl> _M_impl;
};

template <class _Executor>
  strand<_Executor> make_executor(const strand<_Executor>& __e);
template <class _Executor>
  strand<_Executor> make_executor(strand<_Executor>&& __e);

template <class _T> auto make_strand(_T&& __t);

} // namespace experimental
} // namespace std

#include <experimental/bits/strand.h>

#endif
